syntax = "proto3";

package com.hearlers.v1.service;

import "com/hearlers/v1/model/counsel_prompt.proto";

option java_package = "com.hearlers.api.proto.v1.service";
option java_multiple_files = true;

service CounselPromptService {
    // prompt version
    rpc FindPromptVersions (FindPromptVersionsRequest) returns (FindPromptVersionsResponse);
    rpc FindPromptVersionById (FindPromptVersionByIdRequest) returns (FindPromptVersionByIdResponse);
    rpc FindTemporaryVersion (FindTemporaryVersionRequest) returns (FindTemporaryVersionResponse);
    rpc FindActiveVersion (FindActiveVersionRequest) returns (FindActiveVersionResponse);
    rpc LoadExistingPromptVersion (LoadExistingPromptVersionRequest) returns (LoadExistingPromptVersionResponse);
    rpc SaveTemporaryVersion (SaveTemporaryVersionRequest) returns (SaveTemporaryVersionResponse);
    rpc UpdatePromptVersion (UpdatePromptVersionRequest) returns (UpdatePromptVersionResponse);
    rpc ActivatePromptVersion (ActivatePromptVersionRequest) returns (ActivatePromptVersionResponse);
    rpc DeletePromptVersions (DeletePromptVersionsRequest) returns (DeletePromptVersionsResponse);

    // persona prompt
    rpc FindPersonaPromptById (FindPersonaPromptByIdRequest) returns (FindPersonaPromptByIdResponse);
    rpc UpdatePersonaPrompt (UpdatePersonaPromptRequest) returns (UpdatePersonaPromptResponse);
    
    // tone prompt
    rpc FindTonePromptById (FindTonePromptByIdRequest) returns (FindTonePromptByIdResponse);
    rpc UpdateTonePrompt (UpdateTonePromptRequest) returns (UpdateTonePromptResponse);

    // counsel technique
    rpc CreateCounselTechnique (CreateCounselTechniqueRequest) returns (CreateCounselTechniqueResponse);
    rpc FindOrderedCounselTechniques (FindOrderedCounselTechniquesRequest) returns (FindOrderedCounselTechniquesResponse);
    rpc FindCounselTechniqueById (FindCounselTechniqueByIdRequest) returns (FindCounselTechniqueByIdResponse);
    rpc UpdateCounselTechnique (UpdateCounselTechniqueRequest) returns (UpdateCounselTechniqueResponse);
    rpc SaveCounselTechniqueSequence (SaveCounselTechniqueSequenceRequest) returns (SaveCounselTechniqueSequenceResponse);

    // prompt activate history
    rpc FindPromptActivateHistories (FindPromptActivateHistoriesRequest) returns (FindPromptActivateHistoriesResponse);

    // Model
    rpc FindAiModel (FindAiModelRequest) returns (FindAiModelResponse);
    rpc SetAiModel (SetAiModelRequest) returns (SetAiModelResponse);
}

// prompt version
message FindPromptVersionsRequest {
    optional string name = 1;
    optional bool is_bookmarked = 2;
}

message FindPromptVersionsResponse {
    repeated com.hearlers.v1.model.PromptVersion prompt_versions = 1;
}

message FindPromptVersionByIdRequest {
    string prompt_version_id = 1;
}

message FindPromptVersionByIdResponse {
    optional com.hearlers.v1.model.PromptVersion prompt_version = 1;
}

// 현재 수정중인 임시버전 조회
// 수정중인 임시버전이 없을 경우, 새롭게 생성 및 현재 활성화 버전 복사
message FindTemporaryVersionRequest {}

message FindTemporaryVersionResponse {
    optional com.hearlers.v1.model.PromptVersion prompt_version = 1;
}

message FindActiveVersionRequest {}

message FindActiveVersionResponse {
    optional com.hearlers.v1.model.PromptVersion prompt_version = 1;
}

// 저장된 버전을 임시버전으로 복사
message LoadExistingPromptVersionRequest {
    string prompt_version_id = 1;
}

message LoadExistingPromptVersionResponse {
    optional com.hearlers.v1.model.PromptVersion prompt_version = 1;
}

// 임시버전 저장
message SaveTemporaryVersionRequest {
    string name = 1;
    string description = 2;
    bool is_bookmarked = 3;
    com.hearlers.v1.model.AiModel ai_model = 4;
}

message SaveTemporaryVersionResponse {
    optional com.hearlers.v1.model.PromptVersion prompt_version = 1;
}

// 버전 수정
message UpdatePromptVersionRequest {
    string prompt_version_id = 1;
    optional string name = 2;
    optional string description = 3;
    optional bool is_bookmarked = 4;
    optional com.hearlers.v1.model.AiModel ai_model = 5;
}

message UpdatePromptVersionResponse {
    optional com.hearlers.v1.model.PromptVersion prompt_version = 1;
}

// 저장된 버전 활성화(서비스 반영)
// 이후 생성되는 상담들부터 해당 버전 적용(기존 상담들 영향 x)
// 임시버전은 활성화 불가
message ActivatePromptVersionRequest {
    string prompt_version_id = 1;
}

message ActivatePromptVersionResponse {
    optional com.hearlers.v1.model.PromptVersion prompt_version = 1;
}

// 삭제
message DeletePromptVersionsRequest {
    repeated string prompt_version_ids = 1;
}

message DeletePromptVersionsResponse {}


// persona prompt
// 불변객체(수정 시 새로운 객체 생성)
message FindPersonaPromptByIdRequest {
    string persona_prompt_id = 1;
}

message FindPersonaPromptByIdResponse {
    optional com.hearlers.v1.model.PersonaPrompt persona_prompt = 1;
}

// 임시버전에서 수정
message UpdatePersonaPromptRequest {
    string counselor_id = 1;
    string body = 2;
}

message UpdatePersonaPromptResponse {
    optional com.hearlers.v1.model.PersonaPrompt persona_prompt = 1;
}


// tone prompt
// 불변객체(수정 시 새로운 객체 생성)
message FindTonePromptByIdRequest {
    string tone_prompt_id = 1;
}

message FindTonePromptByIdResponse {
    optional com.hearlers.v1.model.TonePrompt tone_prompt = 1;
}

// 임시버전에서 수정
message UpdateTonePromptRequest {
    string tone_id = 1;
    string body = 2;
}

message UpdateTonePromptResponse {
    optional com.hearlers.v1.model.TonePrompt tone_prompt = 1;
}


// counsel technique
// 불변객체(수정 시 새로운 객체 생성)
// 임시기법(다른 기법들과 링크x)으로 생성
// 추후 순서지정 필요
message CreateCounselTechniqueRequest {
    string name = 1;
    string tone_id = 2;
    string context = 3;
    string instruction = 4;
    int32 message_threshold = 5;
}

message CreateCounselTechniqueResponse {
    com.hearlers.v1.model.CounselTechnique counsel_technique = 1;
}

message FindOrderedCounselTechniquesRequest {
    string first_counsel_technique_id = 1;
}

message FindOrderedCounselTechniquesResponse {
    repeated com.hearlers.v1.model.CounselTechnique counsel_techniques = 1;
}

message FindCounselTechniqueByIdRequest {
    string counsel_technique_id = 1;
}

message FindCounselTechniqueByIdResponse {
    optional com.hearlers.v1.model.CounselTechnique counsel_technique = 1;
}

// 임시버전에서 수정
// 아직 링크되지 않은 임시기법은 수정 불가
// 수정 후 해당 기법이 포함된 기법리스트 반환
message UpdateCounselTechniqueRequest {
    string counsel_technique_id = 1;
    optional string name = 2;
    optional string context = 3;
    optional string instruction = 4;
    optional int32 message_threshold = 5;
}

message UpdateCounselTechniqueResponse {
    repeated com.hearlers.v1.model.CounselTechnique counsel_techniques = 1;
}

// 임시버전에서 수정
// 기존 기법 및 임시기법들을 연결
// 연결된 최종 기법 리스트 반환
message SaveCounselTechniqueSequenceRequest {
    string tone_id = 1;
    repeated string counsel_technique_ids = 2;
}

message SaveCounselTechniqueSequenceResponse {
    repeated com.hearlers.v1.model.CounselTechnique counsel_techniques = 1;
}


// prompt activate history
message FindPromptActivateHistoriesRequest {
    optional string prompt_version_id = 1;
}

message FindPromptActivateHistoriesResponse {
    repeated com.hearlers.v1.model.PromptActivateHistory prompt_activate_histories = 1;
}


// GPT Model
message FindAiModelRequest {}

message FindAiModelResponse {
    optional com.hearlers.v1.model.AiModel ai_model = 1;
}

message SetAiModelRequest {
    com.hearlers.v1.model.AiModel ai_model = 1;
}

message SetAiModelResponse {
    optional com.hearlers.v1.model.AiModel ai_model = 1;
}