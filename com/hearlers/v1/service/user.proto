syntax = "proto3";

package com.hearlers.v1.service;
import "com/hearlers/v1/model/user.proto";
import "com/hearlers/v1/model/auth_user.proto";
import "com/hearlers/v1/common/pagination.proto";
import "google/protobuf/struct.proto";
option java_package = "com.hearlers.api.proto.v1.service";
option java_multiple_files = true;

service UserService {
  // 최초 접속 시 user & authUser 생성
  rpc InitializeUser (InitializeUserRequest) returns (InitializeUserResponse);
  // 인증 채널 연결
  rpc ConnectAuthChannel (ConnectAuthChannelRequest) returns (ConnectAuthChannelResponse);
  // 리프레시 토큰 저장
  rpc SaveRefreshToken (SaveRefreshTokenRequest) returns (SaveRefreshTokenResponse);
  // 리프레시 토큰 인증
  rpc VerifyRefreshToken (VerifyRefreshTokenRequest) returns (VerifyRefreshTokenResponse);
  // 유저 조회
  rpc FindUserByUserId (FindUserByUserIdRequest) returns (FindUserByUserIdResponse);
  rpc FindUserByNickname (FindUserByNicknameRequest) returns (FindUserByNicknameResponse);
  // 유저 목록 조회
  // rpc FindManyUser (FindManyUserRequest) returns (FindManyUserResult);
  // 인증 유저 조회
  rpc FindAuthUserByAuthUserId (FindAuthUserByAuthUserIdRequest) returns (FindAuthUserByAuthUserIdResponse);
  rpc FindAuthUserByUserId (FindAuthUserByUserIdRequest) returns (FindAuthUserByUserIdResponse);
  rpc FindAuthUserByChannelInfo (FindAuthUserByChannelInfoRequest) returns (FindAuthUserByChannelInfoResponse);
  // 잔여 토큰 체크
  rpc CheckRemainingTokens (CheckRemainingTokensRequest) returns (CheckRemainingTokensResponse);
  // 토큰 예약 (잔여 토큰 없을 시 에러)
  rpc ReserveTokens (ReserveTokensRequest) returns (ReserveTokensResponse);
  // 유저 업데이트
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse);
  // 활동 생성
  rpc CreateActivity (CreateActivityRequest) returns (CreateActivityResponse);
  // 권한 변경
  rpc UpdateAuthority (UpdateAuthorityRequest) returns (UpdateAuthorityResponse);
}

  

// initializeUser
message InitializeUserRequest {}

message InitializeUserResponse {
  com.hearlers.v1.model.User user = 1;
  com.hearlers.v1.model.AuthUser auth_user = 2;
}

// connectAuthChannel
message ConnectAuthChannelRequest {
  string user_id = 1;
  com.hearlers.v1.model.AuthChannel auth_channel = 2;
  string unique_id = 3;
}

message ConnectAuthChannelResponse {
  com.hearlers.v1.model.AuthUser auth_user = 1;
}

// saveRefreshToken
message SaveRefreshTokenRequest {
  string user_id = 1;
  string token = 2;
  // YYYY-MM-DD HH:MM:SS
  string expires_at = 3;
}

message SaveRefreshTokenResponse {
  bool success = 1;
}

// verifyRefreshToken
message VerifyRefreshTokenRequest {
  string user_id = 1;
  string token = 2;
}

message VerifyRefreshTokenResponse {
  bool success = 1;
}

// findOneUser
message FindUserByUserIdRequest {
  string user_id = 1;
}

message FindUserByUserIdResponse {
  optional com.hearlers.v1.model.User user = 1;
} 

// findUserByNickname
message FindUserByNicknameRequest {
  string nickname = 1;
}

message FindUserByNicknameResponse {
  optional com.hearlers.v1.model.User user = 1;
}

// findManyUser
message FindManyUserRequest { 
  com.hearlers.v1.common.Pagination pagination = 1;
} 

message FindManyUserResult {
  repeated com.hearlers.v1.model.User users = 1;
}

// findOneAuthUser
message FindAuthUserByAuthUserIdRequest {
  string auth_user_id = 1;
}

message FindAuthUserByAuthUserIdResponse {
  optional com.hearlers.v1.model.AuthUser auth_user = 1;
}

message FindAuthUserByUserIdRequest {
  string user_id = 1;
}

message FindAuthUserByUserIdResponse {
  optional com.hearlers.v1.model.AuthUser auth_user = 1;
}

message FindAuthUserByChannelInfoRequest {  
  com.hearlers.v1.model.AuthChannel auth_channel = 1;
  string unique_id = 2;
}

message FindAuthUserByChannelInfoResponse {
  optional com.hearlers.v1.model.AuthUser auth_user = 1;
}

// checkRemainingTokens
message CheckRemainingTokensRequest {
  string user_id = 1;
}

message CheckRemainingTokensResponse {
  int32 remaining_tokens = 1;
  int32 max_tokens = 2;
  bool reserved = 3;
  // YYYY-MM-DD HH:MM:SS
  string reserved_timeout = 4;
}

// reserveTokens
message ReserveTokensRequest {
  string user_id = 1;
}

message ReserveTokensResponse {
  int32 remaining_tokens = 1;
  int32 max_tokens = 2;
  bool reserved = 3;
}

// updateUser
message UpdateUserRequest {
  string user_id = 1;
  optional string nickname = 2;
  optional string profile_image = 3;
  optional string phone_number = 4;
  optional com.hearlers.v1.model.Gender gender = 5;
  optional string birthday = 6;
  optional string introduction = 7;
  optional com.hearlers.v1.model.Mbti mbti = 8;
} 

message UpdateUserResponse {
  com.hearlers.v1.model.User user = 1;
} 

// createActivity
message CreateActivityRequest {
  com.hearlers.v1.model.ActivityType activity_type = 1;
  google.protobuf.Struct activity_data = 2;
  com.hearlers.v1.model.DevicePlatform platform = 3;
  string ip_address = 4;
  string user_agent = 5;
  int32 duration_seconds = 6;
}

message CreateActivityResponse {
  com.hearlers.v1.model.UserActivity user_activity = 1;
}

// updateAuthority
message UpdateAuthorityRequest {
  string auth_user_id = 1;
  com.hearlers.v1.model.Authority authority = 2;
}

message UpdateAuthorityResponse {
  com.hearlers.v1.model.AuthUser auth_user = 1;
}